openapi: 3.0.3
info:
  title: Tasks API
  version: 0.2.0
  description: Basis-API für ToDo-Tasks (Step 2 – In-Memory)
servers:
  - url: http://localhost:8080
paths:
  /health:
    get:
      tags: [system]
      operationId: health
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                  time:
                    type: string
                    format: date-time
  /api/v1/tasks:
    get:
      tags: [tasks]
      summary: Liste von Tasks
      parameters:
        - in: query
          name: page
          schema: { type: integer, minimum: 1, default: 1 }
        - in: query
          name: size
          schema: { type: integer, minimum: 1, maximum: 100, default: 20 }
        - in: query
          name: q
          schema: { type: string }
      responses:
        '200':
          description: Liste
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TaskListResponse'
    post:
      tags: [tasks]
      summary: Task anlegen
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TaskCreate'
      responses:
        '201':
          description: Angelegt
          headers:
            Location:
              description: URI des neu angelegten Tasks
              schema: { type: string }
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Task'
        '400':
          $ref: '#/components/responses/BadRequest'
  /api/v1/tasks/{id}:
    get:
      tags: [tasks]
      summary: Task Details
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: string, format: uuid }
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Task'
        '404':
          $ref: '#/components/responses/NotFound'
    patch:
      tags: [tasks]
      summary: Task ändern
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: string, format: uuid }
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TaskUpdate'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Task'
        '404':
          $ref: '#/components/responses/NotFound'
    delete:
      tags: [tasks]
      summary: Task löschen
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: string, format: uuid }
      responses:
        '204':
          description: Gelöscht
        '404':
          $ref: '#/components/responses/NotFound'

components:
  schemas:
    Task:
      type: object
      required: [ id, title, status, createdAt, updatedAt ]
      properties:
        id: { type: string, format: uuid }
        title: { type: string, minLength: 1, maxLength: 200 }
        description: { type: string, maxLength: 2000, nullable: true }
        status:
          type: string
          enum: [ open, doing, done ]
          default: open
        priority:
          type: string
          enum: [ low, normal, high ]
          default: normal
        dueAt: { type: string, format: date-time, nullable: true }
        tags:
          type: array
          items: { type: string }
        createdAt: { type: string, format: date-time }
        updatedAt: { type: string, format: date-time }
    TaskCreate:
      type: object
      required: [ title ]
      properties:
        title: { type: string, minLength: 1, maxLength: 200 }
        description: { type: string, maxLength: 2000, nullable: true }
        priority:
          type: string
          enum: [ low, normal, high ]
          default: normal
        dueAt: { type: string, format: date-time, nullable: true }
        tags:
          type: array
          items: { type: string }
    TaskUpdate:
      type: object
      properties:
        title: { type: string, minLength: 1, maxLength: 200 }
        description: { type: string, maxLength: 2000, nullable: true }
        status:
          type: string
          enum: [ open, doing, done ]
        priority:
          type: string
          enum: [ low, normal, high ]
        dueAt: { type: string, format: date-time, nullable: true }
        tags:
          type: array
          items: { type: string }
    TaskListResponse:
      type: object
      required: [ items, page, size, total ]
      properties:
        items:
          type: array
          items: { $ref: '#/components/schemas/Task' }
        page: { type: integer, minimum: 1 }
        size: { type: integer, minimum: 1 }
        total: { type: integer, minimum: 0 }
  responses:
    NotFound:
      description: Nicht gefunden
      content:
        application/problem+json:
          schema:
            $ref: '#/components/schemas/Problem'
    BadRequest:
      description: Ungültige Anfrage
      content:
        application/problem+json:
          schema:
            $ref: '#/components/schemas/Problem'
  schemas:
    Problem:
      type: object
      required: [ type, title, status ]
      properties:
        type: { type: string, format: uri }
        title: { type: string }
        status: { type: integer }
        detail: { type: string }
        instance: { type: string }
